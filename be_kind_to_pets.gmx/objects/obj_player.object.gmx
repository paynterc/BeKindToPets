<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
///Get player's input
key_right = 0;
key_left = 0;
key_jump = 0;
key_down = 0;

grav = 0.2; 
hsp = 0;//horizontal speed
hsp_carry = 0;
vsp = 0;//vertical speed
vsp_carry = 0;
jumpspeed = 6;
movespeed = 2;
key_down = 0;
foot = sprite_height/2;
can_jump = false;

image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///React to inputs
move = key_left + key_right;
hsp = move * movespeed;
var jumping = false;

if(can_jump)
{
    if (key_jump){
        vsp = -jumpspeed;
        jumping = true;
    }
}

can_jump = false;
hsp_final = hsp + hsp_carry;
hsp_carry = 0;
var player_above = noone;
var player_below = noone;
var grav_temp = grav;


//Horizontal Collision Rope
if (instance_exists(obj_rope))
{
    hit_rope = collision_point(x,y,obj_rope,false,true);
    
    if(hit_rope){
        grav_temp = 0;
        vsp = -3;
    }
}



if(vsp&lt;10)
{
    vsp += grav_temp;
}



//Standing on Player
player_below = collision_point(x,y+jumpspeed,obj_player,false,true);
if(player_below &amp;&amp; !jumping)
{
    if((player_below).vsp&lt;0){
        vsp = (player_below).vsp;
    }    
    hsp_carry = (player_below).hsp_final;
    can_jump = true;
}





//Moving Platform
//Remember, y axis increases as you go down.
var hit_platform_mv = collision_point(x,y+1,obj_platform_mv,false,true);
var hit_platform_impend = collision_point(x,y+vsp,obj_platform_mv,false,true);
if(hit_platform_mv &amp;&amp; y &lt; (hit_platform_mv).y - ((hit_platform_mv).sprite_height/2) &amp;&amp; !jumping)
{
    vsp = 0;
    hsp_carry = (hit_platform_mv).hsp;
    can_jump = true;
}
else if (hit_platform_impend &amp;&amp; y-1 &lt; (hit_platform_impend).y - ((hit_platform_impend).sprite_height/2))
{
    hsp_carry = (hit_platform_impend).hsp;
    while(!place_meeting(x,y+sign(vsp),obj_platform_mv))
    {
        y += sign(vsp);
    }
         
    vsp = 0;
    can_jump = true;
    
}



//Horizontal Collision Check
if (place_meeting(x+hsp_final,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp_final),y,obj_wall))
    {
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}

if (place_meeting(x+hsp_final,y,obj_player))
{
    while(!place_meeting(x+sign(hsp_final),y,obj_player))
    {
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}

x += hsp_final;



//Vertical Collision Check
if (place_meeting(x,y+vsp,obj_wall))
{


    
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    
    
    vsp = 0;
    can_jump = true;
     
}

//Standing on ground
ground_below = collision_point(x,y+1,obj_wall,false,true);

// Land on player
if (place_meeting(x,y+vsp,obj_player) &amp;&amp; !ground_below)
{

    while(!place_meeting(x,y+sign(vsp),obj_player))
    {
        y += sign(vsp);
    }
    
    vsp = 0;
    can_jump = true;

    
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
